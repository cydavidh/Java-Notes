In general, polymorphism means that something (an object or another entity) has many forms.

Java provides two types of polymorphism: `static (compile-time)` and `dynamic (run-time)` polymorphism. The first one is achieved by method overloading, the second one is based on inheritance and method overriding.

The more theoretical approach subdivides polymorphism into several fundamentally different types:

`Ad-hoc polymorphism` refers to polymorphic functions that can be applied to arguments of different types, but behave differently depending on the type of the argument to which they are applied. Java supports it as method overloading.
`Subtype polymorphism `(also known as subtyping) is a possibility to use an instance of a subclass when an instance of the base class is permitted.
`Parametric polymorphism` is when the code is written without mention of any specific type and thus can be used transparently with any number of new types. Java supports it as generics or generic programming.

In this topic, we consider only subtype (runtime) polymorphism that is widely used in object-oriented programming.

upcasting like 
Animal a = new Dog(); 
is subtype polymorphism and happens in runtime
Java determines at runtime which method of the two classes Animal and Dog to use.
Some method in Dog maybe override Animal's method.


Run-time polymorphism works when an overridden method is called through the reference variable of a superclass. 

Java determines at runtime which version of the method (superclass/subclasses) is to be executed based on the type of the object being referred, not the type of reference. It uses a mechanism known as dynamic method dispatching.